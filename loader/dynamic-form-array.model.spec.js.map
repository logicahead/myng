{"version":3,"sources":["core/src/model/form-array/dynamic-form-array.model.spec.ts"],"names":[],"mappings":"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","file":"dynamic-form-array.model.spec.js","sourcesContent":["import {\n    DYNAMIC_FORM_CONTROL_TYPE_ARRAY,\n    DynamicFormArrayModel,\n    DynamicFormArrayGroupModel\n} from \"./dynamic-form-array.model\";\nimport {DynamicInputModel} from \"../input/dynamic-input.model\";\n\ndescribe(\"DynamicFormArrayModel test suite\", () => {\n\n    let model: DynamicFormArrayModel,\n        config = {\n            id: \"formArray\",\n            initialCount: 3,\n            createGroup: () => [new DynamicInputModel({id: \"defaultInput\"})],\n            validator: {required: null}\n        };\n\n    beforeEach(() => model = new DynamicFormArrayModel(config));\n\n    it(\"should initialize correctly\", () => {\n\n        expect(model.initialCount).toBe(config.initialCount);\n        expect(model.size).toBe(model.initialCount);\n        expect(model.id).toEqual(config.id);\n        expect(model.type).toEqual(DYNAMIC_FORM_CONTROL_TYPE_ARRAY);\n        expect(model.asyncValidator).toBeNull();\n        expect(model.validator).toBeDefined();\n        expect(model.createGroup().length).toEqual(1);\n        expect(model.removeGroup).toBeDefined();\n    });\n\n    it(\"should throw when no createGroup function is specified\", () => {\n\n        expect(() => new DynamicFormArrayModel({id: \"test\"}))\n            .toThrow(new Error(\"createGroup function must be specified for DynamicFormArrayModel\"));\n    });\n\n    it(\"should get the correct group model\", () => {\n\n        expect(model.get(0) instanceof DynamicFormArrayGroupModel).toBe(true);\n        expect(model.get(1) instanceof DynamicFormArrayGroupModel).toBe(true);\n    });\n\n    it(\"should add another form array group\", () => {\n\n        model.addGroup();\n\n        expect(model.size).toBe(config.initialCount + 1);\n    });\n\n    it(\"should serialize correctly\", () => {\n\n        let json = JSON.parse(JSON.stringify(model));\n\n        expect(json.asyncValidators).toBeUndefined();\n        expect(json.id).toEqual(model.id);\n        expect(json.groups.length).toEqual(model.size);\n        expect(json.type).toEqual(DYNAMIC_FORM_CONTROL_TYPE_ARRAY);\n        expect(Object.keys(json.validator)[0]).toEqual(\"required\");\n        expect(json.validators).toBeUndefined();\n    });\n});"]}