{"version":3,"sources":["core/src/service/dynamic-form-autofill.service.spec.ts"],"names":[],"mappings":"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","file":"dynamic-form-autofill.service.spec.js","sourcesContent":["import {TestBed, inject} from \"@angular/core/testing\";\nimport {DynamicFormAutoFillService} from \"./dynamic-form-autofill.service\";\n\ndescribe(\"DynamicFormAutoFillService test suite\", () => {\n\n    let service;\n\n    beforeEach(() => {\n\n        TestBed.configureTestingModule({\n            providers: [DynamicFormAutoFillService]\n        });\n    });\n\n    beforeEach(inject([DynamicFormAutoFillService], autoFillService => service = autoFillService));\n\n    it(\"should validate autofill expressions correctly\", () => {\n\n        let value1 = \"section-test shipping mobile tel\";\n        let value2 = \"billing section-test mobile tel\";\n        let value3 = \"section-test shipping tel\";\n        let value4 = \"section-test work given-name\";\n        let value5 = \"billing cc-name\";\n        let value6 = \"home email\";\n        let value7 = \"section-test shipping work\";\n        let value8 = \"section-test work shipping tel\";\n        let value9 = \"billing country\";\n        let value10 = \"billing country name\";\n        let value11 = \"billing shipping name\";\n        let value12 = \"section-test1 section-test2 shipping name\";\n        let value13 = \"section-test1 blabla name\";\n        let value14 = \"section-test1 blabla mobile tel\";\n\n        expect(service.validate(value1)).toBe(true);\n        expect(service.validate(value2)).toBe(false);\n        expect(service.validate(value3)).toBe(false);\n        expect(service.validate(value4)).toBe(false);\n        expect(service.validate(value5)).toBe(true);\n        expect(service.validate(value6)).toBe(true);\n        expect(service.validate(value7)).toBe(false);\n        expect(service.validate(value8)).toBe(false);\n        expect(service.validate(value9)).toBe(true);\n        expect(service.validate(value10)).toBe(false);\n        expect(service.validate(value11)).toBe(false);\n        expect(service.validate(value12)).toBe(false);\n        expect(service.validate(value13)).toBe(false);\n        expect(service.validate(value14)).toBe(false);\n    });\n\n    it(\"should validate address tokens correctly\", () => {\n\n        expect(service.isAddressToken(\"shipping\")).toBe(true);\n        expect(service.isAddressToken(\"billing\")).toBe(true);\n        expect(service.isAddressToken(\"home\")).toBe(false);\n    });\n\n    it(\"should validate contact tokens correctly\", () => {\n\n        expect(service.isContactToken(\"home\")).toBe(true);\n        expect(service.isContactToken(\"work\")).toBe(true);\n        expect(service.isContactToken(\"mobile\")).toBe(true);\n        expect(service.isContactToken(\"fax\")).toBe(true);\n        expect(service.isContactToken(\"pager\")).toBe(true);\n        expect(service.isContactToken(\"billing\")).toBe(false);\n    });\n\n    it(\"should validate section tokens correctly\", () => {\n\n        expect(service.isSectionToken(\"section-test\")).toBe(true);\n        expect(service.isSectionToken(\"section\")).toBe(false);\n    });\n\n    it(\"should validate contact fields correctly\", () => {\n\n        expect(service.isContactField(\"tel\")).toBe(true);\n        expect(service.isContactField(\"email\")).toBe(true);\n        expect(service.isContactField(\"impp\")).toBe(true);\n        expect(service.isContactField(\"name\")).toBe(false);\n        expect(service.isContactField(\"country\")).toBe(false);\n    });\n\n    it(\"should validate fields correctly\", () => {\n\n        expect(service.isField(\"street-address\")).toBe(true);\n        expect(service.isField(\"nickname\")).toBe(true);\n        expect(service.isField(\"organization\")).toBe(true);\n        expect(service.isField(\"postal-code\")).toBe(true);\n        expect(service.isField(\"country\")).toBe(true);\n        expect(service.isField(\"tel\")).toBe(false);\n        expect(service.isField(\"email\")).toBe(false);\n    });\n});"]}