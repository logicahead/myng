{"version":3,"sources":["ui-primeng/src/dynamic-form-primeng.component.spec.ts"],"names":[],"mappings":"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","file":"dynamic-form-primeng.component.spec.js","sourcesContent":["import {Type, DebugElement} from \"@angular/core\";\nimport {TestBed, async, inject, ComponentFixture} from \"@angular/core/testing\";\nimport {ReactiveFormsModule, FormGroup, FormControl} from \"@angular/forms\";\nimport {By} from \"@angular/platform-browser\";\nimport {\n    DynamicFormsCoreModule,\n    DynamicFormService,\n    DynamicInputModel,\n    DynamicFormControlModel\n} from \"@ng2-dynamic-forms/core\";\nimport {CheckboxModule} from \"primeng/components/checkbox/checkbox\";\nimport {DropdownModule} from \"primeng/components/dropdown/dropdown\";\nimport {InputSwitchModule} from \"primeng/components/inputswitch/inputswitch\";\nimport {InputTextModule} from \"primeng/components/inputtext/inputtext\";\nimport {InputTextareaModule} from \"primeng/components/inputtextarea/inputtextarea\";\nimport {MultiSelectModule} from \"primeng/components/multiselect/multiselect\";\nimport {RadioButtonModule} from \"primeng/components/radiobutton/radiobutton\";\nimport {SliderModule} from \"primeng/components/slider/slider\";\nimport {SpinnerModule} from \"primeng/components/spinner/spinner\";\nimport {DynamicFormPrimeNGComponent, DYNAMIC_FORM_UI_PRIME_NG} from \"./dynamic-form-primeng.component\";\n\ndescribe(\"DynamicFormPrimeNGComponent test suite\", () => {\n\n    let inputModel = new DynamicInputModel({id: \"test\"}),\n        formModel = [inputModel],\n        formGroup: FormGroup,\n        fixture: ComponentFixture<DynamicFormPrimeNGComponent>,\n        component: DynamicFormPrimeNGComponent,\n        debugElement: DebugElement,\n        inputElement: DebugElement;\n\n    beforeEach(async(() => {\n\n        TestBed.configureTestingModule({\n\n            imports: [\n                ReactiveFormsModule,\n                DynamicFormsCoreModule.forRoot(),\n                CheckboxModule,\n                DropdownModule,\n                InputSwitchModule,\n                InputTextModule,\n                InputTextareaModule,\n                MultiSelectModule,\n                RadioButtonModule,\n                SliderModule,\n                SpinnerModule\n            ],\n            declarations: [DynamicFormPrimeNGComponent]\n\n        }).compileComponents().then(() => {\n\n            fixture = TestBed.createComponent(DynamicFormPrimeNGComponent as Type<DynamicFormPrimeNGComponent>);\n\n            component = fixture.componentInstance;\n            debugElement = fixture.debugElement;\n        });\n    }));\n\n    beforeEach(inject([DynamicFormService], service => {\n\n        formGroup = service.createFormGroup(formModel);\n\n        component.controlGroup = formGroup;\n        component.model = formModel[0];\n\n        fixture.detectChanges();\n\n        inputElement = debugElement.query(By.css(`input[id='${formModel[0].id}']`));\n    }));\n\n    it(\"should initialize correctly\", () => {\n\n        expect(component.type).toEqual(DYNAMIC_FORM_UI_PRIME_NG);\n\n        expect(component.control instanceof FormControl).toBe(true);\n        expect(component.controlGroup instanceof FormGroup).toBe(true);\n        expect(component.model instanceof DynamicFormControlModel).toBe(true);\n        expect(component.hasErrorMessaging).toBe(false);\n\n        expect(component.onControlValueChanges).toBeDefined();\n        expect(component.onModelDisabledUpdates).toBeDefined();\n        expect(component.onModelValueUpdates).toBeDefined();\n\n        expect(component.blur).toBeDefined();\n        expect(component.change).toBeDefined();\n        expect(component.focus).toBeDefined();\n\n        expect(component.onValueChange).toBeDefined();\n        expect(component.onFocusChange).toBeDefined();\n\n        expect(component.isValid).toBe(true);\n        expect(component.isInvalid).toBe(false);\n    });\n\n    it(\"should have an input element\", () => {\n\n        expect(inputElement instanceof DebugElement).toBe(true);\n    });\n\n    it(\"should listen to native focus and blur events\", () => {\n\n        spyOn(component, \"onFocusChange\");\n\n        inputElement.triggerEventHandler(\"focus\", null);\n        inputElement.triggerEventHandler(\"blur\", null);\n\n        expect(component.onFocusChange).toHaveBeenCalledTimes(2);\n    });\n\n    it(\"should listen to native change event\", () => {\n\n        spyOn(component, \"onValueChange\");\n\n        inputElement.triggerEventHandler(\"change\", null);\n\n        expect(component.onValueChange).toHaveBeenCalled();\n    });\n\n    it(\"should update model value when control value changes\", () => {\n\n        spyOn(component, \"onControlValueChanges\");\n\n        component.ngOnInit();\n\n        component.control.setValue(\"test\");\n\n        expect(component.onControlValueChanges).toHaveBeenCalled();\n    });\n\n    it(\"should update control value when model value changes\", () => {\n\n        spyOn(component, \"onModelValueUpdates\");\n\n        component.ngOnInit();\n\n        inputModel.valueUpdates.next(\"test\");\n\n        expect(component.onModelValueUpdates).toHaveBeenCalled();\n    });\n\n    it(\"should update control activation when model disabled property changes\", () => {\n\n        spyOn(component, \"onModelDisabledUpdates\");\n\n        component.ngOnInit();\n\n        inputModel.disabledUpdates.next(true);\n\n        expect(component.onModelDisabledUpdates).toHaveBeenCalled();\n    });\n});"]}