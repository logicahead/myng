{"version":3,"sources":["core/src/model/checkbox/dynamic-checkbox.model.spec.ts"],"names":[],"mappings":";AAAA,mEAIkC;AAElC,QAAQ,CAAC,iCAAiC,EAAE;IAExC,IAAI,KAA2B,EAC3B,MAAM,GAAG;QACL,EAAE,EAAE,UAAU;QACd,KAAK,EAAE,IAAI;KACd,CAAC;IAEN,UAAU,CAAC,cAAM,OAAA,KAAK,GAAG,IAAI,6CAAoB,CAAC,MAAM,CAAC,EAAxC,CAAwC,CAAC,CAAC;IAE3D,EAAE,CAAC,6BAA6B,EAAE;QAE9B,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,kEAAyC,CAAC,CAAC;QACvE,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC5C,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACpC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC/B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QACrC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,2DAAkC,CAAC,CAAC;QAC/D,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE;QAEhD,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAEzC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;QAEtB,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAClC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE;QAE1B,KAAK,CAAC,MAAM,EAAE,CAAC;QAEf,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC1C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE;QAE7B,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QAE7C,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAClC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,2DAAkC,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","file":"dynamic-checkbox.model.spec.js","sourcesContent":["import {\n    DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX,\n    DYNAMIC_FORM_CONTROL_CHECKBOX_ALIGN_START,\n    DynamicCheckboxModel\n} from \"./dynamic-checkbox.model\";\n\ndescribe(\"DynamicCheckboxModel test suite\", () => {\n\n    let model: DynamicCheckboxModel,\n        config = {\n            id: \"checkbox\",\n            value: true\n        };\n\n    beforeEach(() => model = new DynamicCheckboxModel(config));\n\n    it(\"should initialize correctly\", () => {\n\n        expect(model.align).toEqual(DYNAMIC_FORM_CONTROL_CHECKBOX_ALIGN_START);\n        expect(model.asyncValidators).toEqual(null);\n        expect(model.disabled).toBe(false);\n        expect(model.id).toEqual(config.id);\n        expect(model.indeterminate).toBe(false);\n        expect(model.label).toBeNull();\n        expect(model.name).toEqual(model.id);\n        expect(model.type).toEqual(DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX);\n        expect(model.validators).toEqual(null);\n        expect(model.value).toBe(config.value);\n    });\n\n    it(\"should get and set checked property correctly\", () => {\n\n        expect(model.checked).toBe(config.value);\n\n        model.checked = false;\n\n        expect(model.checked).toBe(false);\n        expect(model.value).toBe(false);\n    });\n\n    it(\"should toggle correctly\", () => {\n\n        model.toggle();\n\n        expect(model.checked).toBe(!config.value);\n        expect(model.value).toBe(!config.value);\n    });\n\n    it(\"should serialize correctly\", () => {\n\n        let json = JSON.parse(JSON.stringify(model));\n\n        expect(json.id).toEqual(model.id);\n        expect(json.value).toBe(model.value);\n        expect(json.type).toEqual(DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX);\n    });\n});"]}