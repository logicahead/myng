{"version":3,"sources":["core/src/service/dynamic-form-relation.service.spec.ts"],"names":[],"mappings":"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","file":"dynamic-form-relation.service.spec.js","sourcesContent":["import {TestBed, inject} from \"@angular/core/testing\";\nimport {ReactiveFormsModule, FormGroup} from \"@angular/forms\";\nimport {DynamicFormRelationService} from \"./dynamic-form-relation.service\";\nimport {DynamicFormService} from \"./dynamic-form.service\";\nimport {DynamicRadioGroupModel} from \"../model/radio/dynamic-radio-group.model\";\nimport {DynamicSelectModel} from \"../model/select/dynamic-select.model\";\nimport {DynamicTextAreaModel} from \"../model/textarea/dynamic-textarea.model\";\n\ndescribe(\"DynamicFormRelationService test suite\", () => {\n\n    let service: DynamicFormRelationService,\n        controlGroup: FormGroup,\n        model: DynamicTextAreaModel = new DynamicTextAreaModel({id: \"testTextArea\"}),\n        rel1 = {\n            action: \"DISABLE\",\n            connective: \"OR\",\n            when: [\n                {\n                    id: \"testSelect\",\n                    value: \"option-2\"\n                },\n                {\n                    id: \"testRadioGroup\",\n                    value: \"option-3\"\n                }\n            ]\n        },\n        rel2 = {\n            action: \"ENABLE\",\n            connective: \"AND\",\n            when: [\n                {\n                    id: \"testSelect\",\n                    value: \"option-3\"\n                },\n                {\n                    id: \"testRadioGroup\",\n                    value: \"option-2\",\n                }\n            ]\n        },\n        rel3 = {\n            action: \"DISABLE\",\n            connective: \"AND\",\n            when: [\n                {\n                    id: \"testSelect\",\n                    value: \"option-2\"\n                },\n                {\n                    id: \"testRadioGroup\",\n                    value: \"option-3\"\n                }\n            ]\n        },\n        rel4 = {\n            action: \"ENABLE\",\n            connective: \"OR\",\n            when: [\n                {\n                    id: \"testSelect\",\n                    value: \"option-1\"\n                },\n                {\n                    id: \"testRadioGroup\",\n                    value: \"option-2\",\n                }\n            ]\n        },\n        rel5 = {\n            action: \"DISABLE\",\n            connective: \"OR\",\n            when: [\n                {\n                    id: \"testSelect\",\n                    value: \"option-1\"\n                },\n                {\n                    id: \"testRadioGroup\",\n                    value: \"option-3\"\n                }\n            ]\n        };\n\n    beforeEach(() => {\n\n        TestBed.configureTestingModule({\n            imports: [ReactiveFormsModule],\n            providers: [DynamicFormRelationService, DynamicFormService]\n        });\n    });\n\n    beforeEach(inject([DynamicFormRelationService, DynamicFormService], (relationService, formService) => {\n\n        service = relationService;\n        controlGroup = formService.createFormGroup([\n\n            new DynamicSelectModel({\n\n                id: \"testSelect\",\n                options: [{value: \"option-1\"}, {value: \"option-2\"}, {value: \"option-3\"}],\n                value: \"option-1\"\n            }),\n\n            new DynamicRadioGroupModel({\n\n                id: \"testRadioGroup\",\n                options: [{value: \"option-1\"}, {value: \"option-2\"}, {value: \"option-3\"}],\n                value: \"option-1\"\n            }),\n\n            model\n        ]);\n    }));\n\n    it(\"should find an activation relation correctly\", () => {\n\n        model.relation = [rel1];\n        expect(service.findActivationRelation(model.relation)).toBe(rel1);\n\n        model.relation = [rel2];\n        expect(service.findActivationRelation(model.relation)).toBe(rel2);\n    });\n\n    it(\"should get all related form controls correctly\", () => {\n\n        model.relation = [rel2];\n\n        expect(service.getRelatedFormControls(model, controlGroup).length).toBe(2);\n    });\n\n    it(\"should throw when model depends on itself\", () => {\n\n        model.relation = [{\n            action: \"DISABLE\",\n            when: [\n                {\n                    id: \"testTextArea\",\n                    value: \"test\"\n                }\n            ]\n        }];\n\n        expect(() => service.getRelatedFormControls(model, controlGroup))\n            .toThrow(new Error(`FormControl ${model.id} cannot depend on itself`));\n    });\n\n    it(\"should check if form control is to be disabled correctly\", () => {\n\n        model.relation = [rel1];\n        expect(service.isFormControlToBeDisabled(model.relation[0], controlGroup)).toBe(false);\n\n        model.relation = [rel2];\n        expect(service.isFormControlToBeDisabled(model.relation[0], controlGroup)).toBe(true);\n\n        model.relation = [rel3];\n        expect(service.isFormControlToBeDisabled(model.relation[0], controlGroup)).toBe(false);\n\n        model.relation = [rel4];\n        expect(service.isFormControlToBeDisabled(model.relation[0], controlGroup)).toBe(false);\n\n        model.relation = [rel5];\n        expect(service.isFormControlToBeDisabled(model.relation[0], controlGroup)).toBe(true);\n\n        model.relation = [{action: \"TEST\", when: [{id: \"testTextArea\", value: \"test\"}]}];\n        expect(service.isFormControlToBeDisabled(model.relation[0], controlGroup)).toBe(false);\n    });\n});"]}