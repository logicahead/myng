{"version":3,"sources":["core/src/model/select/dynamic-select.model.spec.ts"],"names":[],"mappings":"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","file":"dynamic-select.model.spec.js","sourcesContent":["import {DYNAMIC_FORM_CONTROL_TYPE_SELECT, DynamicSelectModel} from \"./dynamic-select.model\";\n\ndescribe(\"DynamicSelectModel test suite\", () => {\n\n    let model: DynamicSelectModel<string>,\n        config = {\n            id: \"select\",\n            multiple: false,\n            options: [\n                {\n                    value: \"1\",\n                    label: \"One\"\n                },\n                {\n                    value: \"2\",\n                    label: \"Two\"\n                }\n            ]\n        };\n\n    beforeEach(() => model = new DynamicSelectModel(config));\n\n    it(\"should initialize correctly\", () => {\n\n        expect(model.disabled).toBe(false);\n        expect(model.id).toEqual(config.id);\n        expect(model.label).toBeNull();\n        expect(model.multiple).toBe(config.multiple);\n        expect(model.name).toEqual(model.id);\n        expect(model.options.length).toBe(config.options.length);\n        expect(model.type).toEqual(DYNAMIC_FORM_CONTROL_TYPE_SELECT);\n        expect(model.value).toBeNull();\n    });\n\n    it(\"should get and set text property correctly\", () => {\n\n        expect(model.get(0).text).toEqual(\"One\");\n\n        model.get(0).text = \"Eins\";\n\n        expect(model.get(0).text).toEqual(\"Eins\");\n    });\n\n    it(\"should add another option\", () => {\n\n        let option = {label: \"test option\", value: \"test-option\"};\n\n        model.add(option);\n\n        expect(model.options.length).toBe(config.options.length + 1);\n        expect(model.get(model.options.length - 1).value).toEqual(option.value);\n    });\n\n    it(\"should insert another option\", () => {\n\n        let option = {label: \"test option\", value: \"test-option\"},\n            index = 1;\n\n        model.insert(index, option);\n\n        expect(model.options.length).toBe(config.options.length + 1);\n        expect(model.get(index).value).toEqual(option.value);\n    });\n\n    it(\"should remove a given option\", () => {\n\n        model.remove(1);\n\n        expect(model.options.length).toBe(config.options.length - 1);\n    });\n\n    it(\"should get the correct option\", () => {\n\n        expect(model.get(0)).toEqual(model.options[0]);\n        expect(model.get(1)).toEqual(model.options[1]);\n    });\n\n    it(\"should select correct option\", () => {\n\n        model.select(1);\n\n        expect(model.value).toEqual(model.get(1).value);\n    });\n\n    it(\"should select multiple options\", () => {\n\n        model.multiple = true;\n        model.select(0, 1);\n\n        expect(model.value).toEqual([model.get(0).value, model.get(1).value]);\n    });\n\n    it(\"should serialize correctly\", () => {\n\n        let json = JSON.parse(JSON.stringify(model));\n\n        expect(json.id).toEqual(model.id);\n        expect(json.options.length).toBe(model.options.length);\n        expect(json.value).toBe(model.value);\n        expect(json.type).toEqual(DYNAMIC_FORM_CONTROL_TYPE_SELECT);\n    });\n});"]}