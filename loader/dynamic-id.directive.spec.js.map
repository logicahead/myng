{"version":3,"sources":["core/src/directive/dynamic-id.directive.spec.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,iDAAgE;AAChE,sCAA4D;AAC5D,8DAA6C;AAC7C,+DAA0D;AAQ1D,IAAM,aAAa;IAAnB;IACA,CAAC;IAAD,oBAAC;AAAD,CADA,AACC,IAAA;AADK,aAAa;IANlB,gBAAS,CAAC;QACP,QAAQ,EAAE,iGAGT;KACJ,CAAC;;GACI,aAAa,CAClB;AAED,QAAQ,CAAC,+BAA+B,EAAE;IAEtC,IAAI,OAAwC,EACxC,UAA+B,CAAC;IAEpC,UAAU,CAAC;QAEP,OAAO,GAAG,iBAAO,CAAC,sBAAsB,CAAC;YAErC,YAAY,EAAE,CAAC,yCAAkB,EAAE,aAAa,CAAC;SAEpD,CAAC,CAAC,eAAe,CAAC,aAAoC,CAAC,CAAC;QAEzD,OAAO,CAAC,aAAa,EAAE,CAAC;QAExB,UAAU,GAAG,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,qBAAE,CAAC,SAAS,CAAC,yCAAkB,CAAC,CAAC,CAAC;IACjF,CAAC,CAAC,CAAC;IAGH,EAAE,CAAC,4BAA4B,EAAE;QAE7B,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE;QAEzB,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC;QACvD,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","file":"dynamic-id.directive.spec.js","sourcesContent":["import {TestBed, ComponentFixture} from \"@angular/core/testing\";\nimport {Component, Type, DebugElement} from \"@angular/core\";\nimport {By} from \"@angular/platform-browser\";\nimport {DynamicIdDirective} from \"./dynamic-id.directive\";\n\n@Component({\n    template: `\n        <div [dynamicId]=\"false\"></div>\n        <div [dynamicId]=\"'testId'\"></div>\n    `\n})\nclass TestComponent {\n}\n\ndescribe(\"DynamicIdDirective test suite\", () => {\n\n    let fixture: ComponentFixture<TestComponent>,\n        directives: Array<DebugElement>;\n\n    beforeEach(() => {\n\n        fixture = TestBed.configureTestingModule({\n\n            declarations: [DynamicIdDirective, TestComponent]\n\n        }).createComponent(TestComponent as Type<TestComponent>);\n\n        fixture.detectChanges();\n\n        directives = fixture.debugElement.queryAll(By.directive(DynamicIdDirective));\n    });\n\n\n    it(\"should have two directives\", () => {\n\n        expect(directives.length).toBe(2);\n    });\n\n    it(\"should have one set id\", () => {\n\n        expect(directives[0].attributes[\"id\"]).toBeUndefined();\n        expect(directives[1].attributes[\"id\"]).toEqual(\"testId\");\n    });\n});"]}