{"version":3,"sources":["core/src/model/input/dynamic-input.model.spec.ts"],"names":[],"mappings":"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","file":"dynamic-input.model.spec.js","sourcesContent":["import {\n    DYNAMIC_FORM_CONTROL_TYPE_INPUT,\n    DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT,\n    DynamicInputModel\n} from \"./dynamic-input.model\";\nimport {AUTOCOMPLETE_ON} from \"../../service/dynamic-form-autofill.service\";\n\ndescribe(\"DynamicInputModel test suite\", () => {\n\n    let model: DynamicInputModel,\n        config = {\n            id: \"input\",\n            list: [\"One\", \"Two\", \"Three\"]\n        };\n\n    beforeEach(() => model = new DynamicInputModel(config));\n\n    it(\"tests if correct default type property is set\", () => {\n\n        expect(model.type).toEqual(DYNAMIC_FORM_CONTROL_TYPE_INPUT);\n    });\n\n    it(\"tests if correct default input type property is set\", () => {\n\n        expect(model.inputType).toEqual(DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT);\n    });\n\n    it(\"tests if correct default autoComplete property is set\", () => {\n\n        expect(model.autoComplete).toEqual(AUTOCOMPLETE_ON);\n    });\n\n    it(\"tests if correct default autoFocus property is set\", () => {\n\n        expect(model.autoFocus).toBe(false);\n    });\n\n    it(\"tests if correct default cls properties aree set\", () => {\n\n        expect(model.cls).toBeDefined();\n        expect(model.cls.element.container).toEqual(\"\");\n        expect(model.cls.element.control).toEqual(\"\");\n        expect(model.cls.element.errors).toEqual(\"\");\n        expect(model.cls.element.label).toEqual(\"\");\n        expect(model.cls.grid.container).toEqual(\"\");\n        expect(model.cls.grid.control).toEqual(\"\");\n        expect(model.cls.grid.errors).toEqual(\"\");\n        expect(model.cls.grid.label).toEqual(\"\");\n    });\n\n    it(\"tests if correct default hint property is set\", () => {\n\n        expect(model.hint).toBeNull();\n    });\n\n    it(\"tests if correct default label property is set\", () => {\n\n        expect(model.label).toBeNull();\n    });\n\n    it(\"tests if correct default list property is set\", () => {\n\n        expect(model.list).toEqual(config.list);\n    });\n\n    it(\"tests if correct default max property is set\", () => {\n\n        expect(model.max).toBeNull();\n    });\n\n    it(\"tests if correct default maxLength property is set\", () => {\n\n        expect(model.maxLength).toBeNull();\n    });\n\n    it(\"tests if correct default minLength property is set\", () => {\n\n        expect(model.minLength).toBeNull();\n    });\n\n    it(\"tests if correct default min property is set\", () => {\n\n        expect(model.min).toBeNull();\n    });\n\n    it(\"tests if correct default placeholder property is set\", () => {\n\n        expect(model.placeholder).toEqual(\"\");\n    });\n\n    it(\"tests if correct default readonly property is set\", () => {\n\n        expect(model.readOnly).toBe(false);\n    });\n\n    it(\"tests if correct default required property is set\", () => {\n\n        expect(model.required).toBe(false);\n    });\n\n    it(\"tests if correct default spellcheck property is set\", () => {\n\n        expect(model.spellCheck).toBe(false);\n    });\n\n    it(\"tests if correct default step property is set\", () => {\n\n        expect(model.step).toBeNull();\n    });\n\n    it(\"tests if correct default prefix property is set\", () => {\n\n        expect(model.prefix).toBeNull();\n    });\n\n    it(\"tests if correct default suffix property is set\", () => {\n\n        expect(model.suffix).toBeNull();\n    });\n\n    it(\"should serialize correctly\", () => {\n\n        let json = JSON.parse(JSON.stringify(model));\n\n        expect(json.id).toEqual(model.id);\n        expect(json.disabled).toEqual(model.disabled);\n        expect(json.value).toBe(model.value);\n        expect(json.type).toEqual(DYNAMIC_FORM_CONTROL_TYPE_INPUT);\n    });\n});"]}