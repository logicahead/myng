import {Pipe, PipeTransform} from '@angular/core';

@Pipe({ name: 'orderby' })
export class OrderByPipe implements PipeTransform {

  transform(array: Array<string>, key: string, order: string = '+'): Array<string> {
    // TODO Handle sort order
    if (key) {
      array.sort((a: any, b: any) => {
        if (a[key] > b[key]) return -1;
        if (a[key] < b[key]) return 1;
        return 0;
      });
    } else {
      array.sort((a: any, b: any) => {
        if (a > b) return -1;
        if (a < b) return 1;
        return 0;
      });
    }
    return array;
  }

}
private sortLiabilityModelsByBalance(liabilityParent: LiabilityParent): LiabilityParent {
    liabilityParent.liabilityModels = _.sortBy(liabilityParent.liabilityModels, function (o: LiabilityModel) {
      if (o.liabilityType === lookupConstants.pos.loan.urla.liabilityType.DEBT.value) {
        return o.debt.balance;
      } else {
        return 0;
      }
    });

    // highest balance first
    liabilityParent.liabilityModels.reverse();

    return liabilityParent;
  }
  
  updateFeeSectionsCpy() : void {
    //TODO: pull property name from a constant. Don't hardcode 'name'
    this.feeSectionsCpy = (this.sections || []).map( ( section: FeesSection ) => {
      return Object.assign({}, omit(section, 'fees') as any, {
        // here is the logic that checks if we should display fee in a template
        fees: chain(section.fees)
          .filter( ( fee: SelectableMortgagePricingFee ) => /*!fee.selected &&*/ fee.isEditable /*&& !fee.hasBeenEditedByUser*/)
          .sortBy(['name'])
          .map(f=>Object.assign({}, f))
          .value()
      } as any)
    });
    
    getPaidByOptions(
    allOptions: string[],
    usedOptions: string[],
    rowPaidByOption: string
  ) : string[] {
    return _.chain(allOptions)
      .difference(usedOptions)
      .concat(rowPaidByOption)
      .sortBy([ option => allOptions.indexOf(option)])
      .value();
  }
